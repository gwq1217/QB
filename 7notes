2017/2/24  知识点汇总
sda3
hdb5
sdc1
legacy
basic input output system  bios  cmos
secure boot 
efi-->uefi  guid 
Unified Extensible Firmware Interface

x11 窗口图形化协议  xfce（轻量级）kde（定制性最高）  gnome2（使用人数最多的，稳定性最好） unity（ubuntu自带的）  



挂载点  /

记住这个概念：在linux中，一切皆文件

bin：  构建系统所需要的最少的指令（常用指令）

boot：  linux（内核）和虚拟文件系统以及操作系统启动所需要的文件

dev：各种设备文件

etc：系统软件和其他软件的配置文件所在路径

home：系统中普通用户的家目录

root：root用户的家目录

lib：库文件存放的路径
lib64：64位库文件存放的路径

media： 挂载目录
msic：挂载目录
mnt：挂载目录

net：和网络有关的文件

opt/usr  可以选择的应用安装目录或者第三方软件安装的路径

proc：进程映像的映射（不占用硬盘资源）

sbin：和系统操作相关的指令

selinux：基于安全的一套策略

tmp：类似于windows的temp（临时文件），其实就是内存中的一些文件的映射

var：所有的应用的数据存放此处，比如日志等。通常大型的服务都会专门为这个目录挂载专用的存储设备

[root@localhost ~]# 
[用户名@主机名 当前所在的目录]#
注：如果提示符是#结尾，表示这个用户是root，如果是$,说明是普通用户


==========   基本指令   =============
在手册中查看内容时可以通过/关键词来检索重要内容，按n是将检索到的关键词从上往下查看，按shift+n是从下往上，按q退出manual page
pgup|pgdn           查看文档一屏一屏
enter               查看文档一行一行
alias ls=‘xxx’      自定义指令
man 1 ls            查看ls的帮助文档
whatis ls           查看ls的描述
which  ls           查看ls的来历
ls  -help          表示分别由选项h、e、l、p结合
ls  --help         两个-表示后面的选项就是一个单词，这个单词就是选项
ls  -a            表示查看所有文件，在linux系统中，隐藏文件的文件名以.开头
rm  -f             等同于  rm --force
rm -rf *           删除当前文件夹下所有文件（慎用）
gnome-terminal     呼出终端命令
rm                 删除文件
rmdir              删除空目录
mkdir              创建目录
MV SS XX           将ss文件改名为xx
ln ss 123          将123作为ss的硬链接
useradd            创建普通用户
touch              创建文件
su - tom             切换到普通用户TOM
sync                 将内存中的内容写入缓存
poweroff             保存完后关机（常用）
shutdown             关机
halt = shutdown -h   快速关机
pwd                  查看当前目录
-d                   解压
chmod 400 passwd 表示passwd文件除了使用具备只读权限外，其他人不具备任何权限
chown tom:tom filename  改变拥有者和群组

tar zxvf figlet.tar.gz  解压gz格式的文件

yum remove  XXXXX\*
yum whatprovides */xxxxxx
yum install xxxxxx
 




===========    快捷键   =============== 
ctrl alt t  打开终端
ctrl shift  t  一个窗口多个终端
ctrl shift f1-f7  
ctrl c  终止当前命令
ctrl l 清屏
shift  pgup|pgdn    在终端下翻屏
ctrl d  退出终端
终端终结者  terminator  



**************************************************************************
*********************   Centos6 的启动流程   *****************************
**************************************************************************
1、POST poweron secure test
cmos软件 bios固件
2、BOOT 
3、识别MBR 512B  
446（引导加载器）：GRUB LILO
64  分区表（每个分区占用16B）
2 magic number魔数
4、读取stage1 
stage1_5 识别各种文件系统
stage2  出现的就是grub界面
5、读取grub.conf 这个文件决定了grub界面的所有内容
6、根据grub.conf的配置读取内核和虚拟文件系统
7、启动init 父进程(PID 1)   /sbin/init   
8、读取配置文件/etc/inittab(选择进入系统的类型 runlevel)
#   0 - halt (Do NOT set initdefault to this)
#   1 - Single user mode  单用户模式
#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)  多用户模式
#   3 - Full multiuser mode 没有图形化的，只能用终端
#   4 - unused
#   5 - X11  图形化
#   6 - reboot (Do NOT set initdefault to this)
9、根据inittab中定义的启动级别，去相应的目录启动需要的脚本。比如是0级别，就去/etc/rc0.d目录下启动所有脚本
同时需要执行fstab和rc.local
注：fstab是系统自动挂载需要的配置

=====sysV init 启动过程中的故障修复======
============root密码的破解===============
选择内核kernel
按e
在最后修改内容init 1 或 single 或 s
按b引导内核进入单用户模式
passwd   

**************************************************************************
*******************   CentOs6内核升级失败的修复   ************************
**************************************************************************
/boot/vmlinuz***  内核
/boot/initrd***   虚拟文件系统
开机进入固件BIOS
BOOT 选择从光盘启动
选择 rescue installed sysetm 救援模式
选择 OK/OK/no network /continue/ok/ok
shell startshell
bash-4.1#chroot  /mnt/sysimage  将光盘中的这个路径切换为/
sh-4.1#mount /dev/cdrom /mnt
挂载光盘到当前的mnt目录中，这个mnt是硬盘中的mnt目录
cd /mnt
ls
cd Packages/
ls Kernel-(tab)
rpm -ivh  参数i表示安装 --force
rpm -ivh --force  kernel-2.****.rpm
exit
reboot

=======mbr分区中的grub修复（先linux，后window）=========
进入救援模式，与修复系统相同
bash-4.1#chroot /mnt/sysimage
sh-4.1#mount /dev/cdrom /mnt
sh-4.1#grub-install /dev/sda 
grub-install是安装文件 不在Packages里面 直接TAB

模拟grub被覆盖
dd if=/dev/zero of=/dev/sda bs=1 count=446
删除引导界面446字节 bs默认单位为1K
if从xxx取（从zero取）if放到哪里 bs表示需要大小 count表示个数

boot的修复，救援模式


========grub.conf文件的配置========
gedit /boot/grub/grub.conf  打开文档
default=0 从第几个选项内核开始引导,0为第一个
timeout=5 等待操作时间
hiddenmenu 是否要显示grub菜单栏目,默认开启
title Centos6 标签

==========grub的加密==============
grub-md5-crypt
Password：12345
复制生成的密文码
生成的md5码添加到grub.cfg的标签title Centos6后下一行
password --md5  黏贴密文码


***********************************************************************************************      RHEL7的启动       *****************************
**************************************************************************
systemd  取代了 sysV init
ubuntu  upstart  epach muda 
init  rc5.d
苹果mac os launchd
gnu lgpl 
cgroup  为每个进程分配一个cgroup
systemd 使用target来控制系统服务的启动
rhel6中使用runlevel，7中用target替代
第一个启动的通常都是default.target
对比两个系统的启动级别
0              poweroff.target 
1              resuce.target 
2              multi-user.target 
3
4
5              graphical.target    
6

 systemctl set-default multi-user.target    设置默认启动服务，下次启动生效
 
 systemd-analyze time                  查看启动时间 
 systemctl isolate graphical.target    切换进入其他级别  
 systemctl list-units                  查看系统中存在的服务
 systemctl list-units --type=service   查看后缀service的服务
 
=======/usr/lib/systemd/system target路径================
 /etc/systemd/system/default.target  主配置文件
 132  systemctl is-active sshd.service   查看服务是否启动
 133 systemctl stop sshd.service         关闭服务
 136  ps -aux |grep sshd                 查看sshd进程
 137  systemctl start sshd.service       启动进程
      service sshd stop

修改grub.cfg来决定系统的启动顺序等需要修改/etc/default/grub,然后使用命令grub2-mkconfig -o  /boot/grub2/来更新grub.cfg的配置，如果是debain类的系统中使用update-grub2来更新
[root@localhost grub.d]# grub2-set-default 1

rescue 模式 单用户模式   需要密码
emergency 模式

=======第一种Rhel7破解root密码的方式 ====================
进入grub界面 选择内核 按E 
在linux16-那一行 最后rhgb quiet 后加入 init=/bin/sh  
crtl+x 引导进入
进入后sh2.4#  此时输入passwd是无法修改成功的
sh2.4#  mount -o  remount，rw /
mount是挂载，参数-o是额外的选项，选项就是remount（重新挂载），rw表示权限
sh2.4#  passwd 
修改密码，成功
sh2.4#  touch /.autorelabel 
创建这个文件的目的是为了让selinux自动打标签
sh2.4#  exec /sbin/init
手动启用刚才的进程


=======第二种hel7下破解root密码的方式（推荐）============
进入Grub界面，选择内核，按E
内核后面（Linux16-后面）跟上参数  rd.break  > ctrl+x
mount -o remount,rw  /sysroot/  重新挂载并要求sysroot可以读写
chroot /sysroot/                切换根
passwd                          修改密码
load_policy -i                  加载selinux
chcon -t shadow_t /etc/shadow   修改shadow的上下文
touch /.autorelabel             重建selinux标签
exit  reboot

============rhel7中grub的修复=====================
通过光盘引导
sh-4.2#chroot /mnt/sysimage  切换根
bash-4.2#grub2-install /dev/sda   安装grub

===========rhel7中内核等引导文件的修复=============
通过光盘引导
sh-4.2#chroot /mnt/sysimage  切换根
bash-4.2#cd /  进入/
bash-4.2#mount /dev/cdrom  /media  挂载光盘到media目录中
bash-4.2#rpm -ivh --force /media/Package/kernel-3.10.rpm
安装内核，安装完成后，boot目录中会生成内核和虚拟文件系统
grub2-install /dev/sda  安装grub2，安装成功后会在/boot目录下生成grub所需要的文件，但是缺少grub.cfg配置文件
grub2-mkconfig -o /boot/grub2/grub.cfg
生成grub.cfg文件

==============添加grub加密==================
在/etc/grub.d/00_header 的末尾添加如下内容：
cat  << EOF
set superusers="tom"
password tom  redhat
EOF
最后执行更新grub.cfg操作
grub2-mkconfig -o /boot/grub2/grub.cfg

=============网络基本配置=====================
[root@centos6 桌面]# cd /etc/sysconfig/network-scripts/ifcfg（网卡名字）
BOOTPROTO=static
IPADDR=192.168.24.44
NETMASK=255.255.255.0
GATEWAY=192.168.24.254
DNS1=192.168.24.254
[root@centos6 network-scripts]# service network restart
RHEL7                           systemctl restart network
重启网络服务
[root@centos6 network-scripts]# service NetworkManager stop
RHEL7                           systemctl NetworkManager stop
[root@centos6 network-scripts]# chkconfig NetworkManager off
关闭NetworkManager服务，防止冲突
注：配置文件的每一个修改，要想生效都必须重启服务
pkgs.org软件包下载网址


=============硬件检测========================
[root@centos6 桌面]# cat /proc/cpuinfo 
查看cpu信息
[root@centos6 ~]# lspci
查看所有的板卡信息
[root@centos6 ~]# lspci |grep net
通过管道过滤net方面的内容
[root@centos6 ~]# cat /proc/meminfo 
查看内存的信息
[root@centos6 ~]# lsusb
查看usb的设备
[root@centos6 ~]# cat /proc/bus/usb/devices 
查看usb的设备信息
[root@centos6 ~]# cat /proc/bus/input/devices 
查看输入设备的信息
[root@centos6 ~]# fdisk -l
查看硬盘信息
[root@centos6 桌面]# df -hT
查看硬盘的使用情况
[root@centos6 桌面]# uname -a
查看系统的信息
[root@centos6 桌面]# cat /proc/version 
查看系统版本信息
[root@centos6 桌面]# lsb_release  -a
查看系统的发布信息
注：lsb是linux的一个核心标准
[root@centos6 ~]# lsblk
列出系统中的所有块设备信息
[root@centos6 ~]# cat /proc/interrupts 
查看设备中所有的IRQ信号，irq值越小优先级越高
[root@centos6 ~]# dmidecode -t bios
查看bios信息
[root@centos6 ~]# pstree -p |grep udev
查看udev这个daemons（守护进程），自动生成设备的名称和定义设备如何使用，它在/etc/rc.d/rc.sysinit脚本运行后开始工作。
etc/udev/rules.d这个目录下存放了系统的规则文件
[root@centos6 rules.d]# pstree -p |grep hal
这个daemon是实现程序和设备之间交流的，告诉程序如何使用设备

================软件安装========================
debain： /etc/apt/source.list
sudo apt-get update  更新源
sudo apt-get upgrade  更新系统
sudo apt-get autoremove  自动删除一些不是用的软件包

==============源码编译安装======================
优点：定制性高
缺点：耗时长
./configure  定制环境
make   编译
make install   安装

==============rpm包安装(debain  dpkg)=================
优点：简单方便
缺点：功能无法定制，存在包依赖
rpm -qa   查看系统中所有的rpm软件包
rpm -qa  |grep kernel   查看系统中包含kernel字符的软件包
rpm -ql  kernel*  查看这个包安装的具体路径
rpm  -qlp  kernel*.rpm  
根据rpm包查看安装后的路径，通常用于安装前
rpm -qc  kernel  查看这个软件包的配置文件所在的路径
rpm -qf  /usr/bin/rz  根据指令逆向找出软件包
rpm -Uvh  升级内核之类不要使用这个更新方式。U表示更新rpm包，如果包没有安装过，那就安装，如果装过，先卸载，重新安装当前版本。
rpm  -e tree  卸载软件包
dpkg -ivh （乌班图安装命令）

============ 源 ===============
/etc/yum.repos.d/        rhel类系统在这个目录下存放了系统自带的源文件
/etc/apt/source.list.d/  (debain类系统的源文件)

apt-get update  更新源
apt-get autoremove  

\ 转义

epel源
DNF 
dnf -list  = yum list 
dnf search tree   = yum search tree
dnf provides /usr/bin/rz  = yum whatprovides /usr/bin/rz
根据程序的指令来获取程序的安装包名称
[root@centos7 /]# dnf list available
 列出当前系统可以使用的软件包
[root@centos7 /]# dnf  check-update 
检查当前哪些软件包需要更新
[root@centos7 /]# dnf autoremove 
自动删除没有依赖关系的独立的无用的包

 ubuntu更新系统：apt-get  upgrade
 apt-get dist-upgrade
 
 apt-get autoreomve
 rhel更新源    yum update 
 rhel更新系统  yum upgrade
 
 
=======通过终端管理服务器的软件============
 putty、secureCRT、Xmanger（xshell）
 非对称加密（RSA）--对称加密

 yum  install  gcc  用于库依赖，必须安装
 yum install  lrzsz  用于终端远程上传和下载到服务器，必须保证终端具备modem协议，通常用crt、xshell、putty等使用
 yum install bash-completion
这个工具用来实现在bash环境中的命令自动补齐
 yum install net-tools   提供了ifconfig等网络指令集

============Linux文件权限和目录配置==============
通过ll获取文件的属性，共分为七段：
权限  硬链接  文件的所有者  文件的所属组 文件大小 文件的修改或创建日期  文件名

-rw-------
第一位表示文件的类型：
- 表示普通文件
b 表示块设备文件（存储）
c 表示字符型设备文件 （通常是鼠标键盘）
d 表示目录
l 软链接文件
p 管道文件（本地的程序间沟通产生的文件）
s 套接字文件（通过网络不通进程进行连接的文件）

后面的九位是定义的文件的权限
---------
rwxrwxrwx
r  读    4
w  写    2
x  执行  1
第一段的三位表示文件的所有者的权限 u
第二段的三位表示的是文件的所属组的权限 g
第三段的三位表示的是其他人的权限 o

修改权限的指令：
chmod  {u|g|o|ug|go|uo|ugo|a} {+|-|=} 
{r|w|x}  filename
例：chmod g-r passwd 
chmod u+w,g=rw,o+rw passwd

[root@centos6 tmp]# chmod 400 passwd 
表示passwd文件除了使用具备只读权限外，其他人不具备任何权限。
chown tom:tom filename  改变拥有者和群组只有root才能改变群组

chmod -R 760 test/
参数-R表示递归，这样操作会将test目录下的所有文化或者目录都改为指定的权限



注：x权限对文件意味着是否具有执行权限，这里的执行也就是运行脚本或应用。对于目录意味着是否可以cd进去。
如果A目录中含有root的文件或者目录，即便普通用户对A目录具备所有权限也无法删除root的东西。但是其他普通的是可以正常删除的。

绝对路径和相对路径
cd ~tom/    cd ~/tom
~ : 当前用户所在的家目录
cd /home/jarry/   这个是绝对路径
-  表示返回上次所在的目录
.   表示当前目录
.. 返回上一级目录

rm           删除文件
rmdir        删除空目录
mkdir        创建目录
mkdir -p
需要时创建目标目录的上层目录，即使这些目录已经存在也不报错

echo $PATH   
$是一个变量符号，PATH是一个变量名称，这里表示请求查看当前用户的指令执行路径

yum安装
优点：尽可能解决包依赖，方便
缺点：存在版本依赖

----------2017/3/17---------------
ll -d test/       查看目录
ll test/          查看目录里的内容
cp -p             拷贝不改变时间
cp -rf /etc/* .   拷贝etc文件中所有文件到当前目录下 -r 拷贝所有目录下的目录文件（递归）f 强制  .当前目录
mv                移动和重命名
mv test/ yyy      将test目录改名为yyy
FHS（filesystem） 文件系统层次标准：可以被共享 不可以被共享 可以被修改 不可以被修改
/usr              是可以被共享的 不可被修改
/boot/ /etc/      不可以被共享的 可以被修改
var/www           是可以被改变的
var/lock 
var/run           不可以被共享，可以被修改
FHS定义了三层目录下应该放置的数据是:
/ /usr /var


cat   xxxxxx |grep 80 --color  过滤80端口文件 并显示颜色          查看小文件（不适合看大文件，cat直接显示到文件末尾）
cat -n                 显示行号，记录空白行
nl                     不记录空白行
stdin     stdout   stderr
标准输入 标准输出 标准错误

more service           空格翻屏 回车翻行
/ssh                   搜索ssh

less service           同more 可↑↓ 也有搜索功能 按小写n往下搜索 shift+大写N往上搜索 q退出

tail -5 service        查看结尾5行
head 4 service         查看开头5行
tail -1 /etc/shadow    查看shadow文件中最后一行

tailf /var/log/messages   查看日志文件内容
alias t="tailf /var/log/messages"

============   2017/3/19上午  ==================
===========  umask 文件权限过滤符  =============
umask的值由4位数构成.最后三位分别表示ugo           第一位是文件特殊权限suid.sgid.sbit
文件                      目录
默认6  6  6             7   7    7
  rw  rw  rw          rwx  rwx  rwx
            0022（umask）
  rw- r-- r--         rwx  r-x  r-x 
  6   4   4            7    5    5

  
设定umask值：umask 0333 
             umask  -s  查看在{默认}的权限下经过{过滤}后保留的权限
系统默认给普通用户的值是umask 0002
         root用户的umask的值是0022

  
=======   隐藏属性   ==========
chattr  +选项  目标文件或目录
只能使用unix/linux类的文件系统，不支持vfat文件系统

		 
lsattr -d test/  查看test目录的隐藏属性
chattr +a test/  添加隐藏权限chattr  +a（选项） 目标文件 
a  表示目录中的文件只能添加不能删除 
A  不能修改文件的访问时间
i  针对文件只读，不能执行任何属性的修改和文件内容的修改
   针对目录，不可以删除和创建内容在目录中
S  立即执行同步写操作，不缓存数据的
u  保证备份进行数据恢复的（未成功）




chattr 


passwd tom             root给tom改密码
/etc/passwd
/etc/shadow            密码存放路径
tail -1 /etc/shadow    查看shadow文件中最后一行


suid
[root@centos6 test]# ll /usr/bin/passwd   查看passwd命令权限
在u的位置的执行权限不是x，而是s，这个就是suid
当一个文件被设置了suid，那么所有用户在执行这个文件时就具备了和这个文件所有者相等的权限。这个权限通常只针对文件设置。首先该其他用户必须有X执行权限
sgid 
[root@centos6 /]# chmod g+s test/  设置目录为sgid
目录被设置sgid后，任何人在这个目录中建立的文件，都属于这个目录本身所属组。
sbit
[root@centos6 /]# chmod o+t test/   sbit设置
在设置了sbit的目录中，只有文件的所有者或者是目录的所有者以及ROOT可删除

umask的第一位数就是过滤suid（4） sgid（2）和sbit（1）权限的
chmod 2777 /test/     这个表示给test目录添加sgid
 
注：如果在文件或者目录设置了suid等相关权限后出现的是大写的S或者T，表示本身这个目录或者文件没有执行x权限

==========  2017/3/19下午  ===========
==========  文件查找 find  =========== 
find /home -print  通过参数查找/home中所有文件 （\n换行符）  默认print
           -print0 不换行（文件名中有空格使用）
find / -name shadow   查找匹配 name表示文件名称
find / -iname shadow  表示忽略大小写
find . ! -name *.txt  列出除了txt意外的文件
find / *.mp4          按后缀查找
find / -maxdepth 2 -name 6.dnf  定制目录查找深度 最大查找2层
find . type d           参数-type表示文件类型
            l           链接文件
            d           目录
            f           普通文件
            c           字符文件
            p           管道文件
            s           套接字文件
			
{find /-type -maxdepth 2 f -name 7.pdf}
find /-maxdepth 2 -type f -name 7.pdf  √√
多个参数叠加搜索，要注意检索时的参数顺序			

-maxdepth  目录的最大深度，表示最多检索多少层目录
-mindepth  目录的最小深度，表示必须要从多少层开始检索

根据时间戳查找：
访问时间（atime天）（amin分钟）
修改时间（ctime）（cmin）
变化时间（mtime）（mmin）
[root@centos6 tmp]# find . -type f -atime +2 
表示查找当前目录下的2天以前被访问过的普通文件。-2表示2天以内的文件。2表示正好2天。
[root@centos6 tmp]# find . -type d -amin -5
[root@centos6 tmp]# find . -type f -newer test1
根据test1文件的时间戳列出比它更新的普通文件
[root@centos6 tmp]# find . -size +10 
查找出当前目录下所有大于10K的文件，如果是大于10M，需要指明+10M
[root@centos6 tmp]# find . -size +90M -size -110M  指定大小范围检索
[root@centos6 tmp]# find . -user tom -group root  根据用户名和组查找
[root@centos6 tmp]# find . -iname \*.mp4 -delete
查找出所有的mp4后缀的文件并删除
[root@centos6 tmp]# find . -type f  -perm 777
查找文件权限为777的普通文件
[root@centos6 tmp]# find . -type f -perm -111
查找普通文件中ugo三组中必须都有执行x权限的文件。-表示和。+表示或
[root@centos6 tmp]# find . -type f -user tom  -exec chown root {} \;
参数-exec是find工具中最强大的一个匹配选项，可以在检索完成后执行特定动作和指令。{} 用来将检索后的内容匹配到命令中去。
上面的意思整体就是查找属于tom用户的所有普通文件，然后将所有文件的所有者改为root
find . -iname \*.pdf -exec rm -rf  {} \; 删除当前目录下的所有pdf后缀文件
			
==========  文件系统  ===========
文件系统：ext4（日志式文件系统），xfs，ntfs，fat32，tmpfs，proc
文件系统是对一个存储设备上的元数据和数据进行组织管理的机制，可以简单理解为是告诉底层和上层如何去读取、存储数据
vfs是让系统如何识别各种文件系统 基于ext4 

日志式文件系统是类unix/Linux特有的，它会在启动时系统中生成一个journal。

元数据：记录硬盘属性 分区表之类
MBR分区方式 硬盘最大2.2T
virtual file system  虚拟文件系统 只存在内存中


扇区为最小的无力储存单位 每个扇区为512B
第一个扇区最重要(0扇区)，里面有硬盘主引导记录grub（MBR）及分区表（partition table）
MBR占有446B 分区表占有64B
mbr后面 boot sector引导扇区》superblock（记录块信息）》inode（128b）》数据（块）4K大小
主分区    primary
扩展分区  extended
逻辑分区  logical
能被格式化的仅有主分区和逻辑分区

主分区和扩展分区最多可以有4个（硬盘限制）
扩展分区最多只能有一个（操作系统设置）
逻辑分区是由扩展分区分出来的分区
能够被格式化后作为数据访问的分区主要分区与逻辑分区，扩展分区无法格式化
逻辑分区的数量依操作系统不同，在linux中 IDE硬盘最多有59个逻辑分区 SATA硬盘则有11个逻辑分区

linux中文件的权限和属性放到inode中 实际数据放到data blok块中
超级块(super block)会记录整个文件系统的整体信息，包括inode与block的总量.使用量.剩余量等
super block 记录此文件系统的整体信息
inode       记录文件属性 一个文件占用一个inode，同时记录此文件的数据所在的block号码
block       实际记录文件的内容，若文件太大时，会占用多个block

inode表记录的数据：
1.该文件的访问模式（read/write/excute）
2.该文件的所有者与组（owner/group）
3.该文件的大小
4.该文件创建的或状态改变的时间
5.最近一次的读取时间
6.最近修改的时间
7.定义文件特性的标志 如setUID
8.该文件真正内容的指向
每个inode文件的大小固定为128bytes
每个文件都仅会占用一个inode
文件系统能够创建的文件数量与inode的数量有关
系统读取文件时需要先找到inode，并分析inode所记录的权限与用户是否符合，若符合才能够开始实际读取block内容



============  2017 3/26  ==============
df -hT
xfs 日志式文件系统 
stat .xxxxx  查看文件具体属性 大小 indoe 
du .xxxxx    查看目录大小 du -h /backup/ 
                          du -hs /    查看单个根目录大小

						  
软链接: 快捷方式，不占用块空间，但是占用inode空间，而且它的存在依赖于它的链接文件。
硬链接：  类unix中特有的，可以用来备份重要文件，并且不占用inode，不占用块空间，但是不能跨分区
复制：产生一个全新的文件，生成新的inode，占用块
移动：同一个分区下，不占用块空间，只是重新定义inode。不同分区下，会重新调整inode和块空间。

======  磁盘分区：MBR和GPT  =======
fdisk  -l  查看当前的硬盘分区参数
1.[root@centos6 ~]# fdisk /dev/sdb
针对sdb硬盘进行分区操作
d   delete a partition               删除一个分区
l   list known partition types       显示已知的分区类型
t   change a partition's system id   改变分区的系统编号，编号通过l获取
n   add a new partition              添加一个新分区
p   print the partition table        显示分区表
q   quit without saving changes      不保存退出
w   write table to disk and exit     保存并退出

  
分区完成后，硬盘需要进行文件系统定义和挂载才能使用。
2.[root@centos6 ~]# mkfs.ext4 /dev/sdb5
格式化磁盘，文件系统定义为ext4
3.[root@centos6 ~]# mount /dev/sdb5 dir/
将硬盘sdb5挂载到dir目录下
4.[root@centos6 ~]# mount -o remount,ro /dev/sdb5  
重新挂载sdb5并定义为只读，还可以定义rw，noexec（不能执行）
[root@centos6 dir]# fuser -mv /dev/sdb5
对于卸载时进程的占用，可以通过上面的指令查看是谁占用了挂载的硬件，然后可以通过kill等指令干掉对方。

[root@centos6 ~]# fsck.ext4 -fc /dev/sdb5
进程强制自检并显示过程

=====   gpt分区：parted  ======
[root@centos6 ~]# parted /dev/sdb
使用parted工具对sdb进行gpt分区
mklabel  创建分区表，指明gpt
mkpart   创建分区 
[root@centos6 ~]# mkfs.ext4 /dev/sdb  格式化

[root@centos6 ~]# gedit /etc/fstab 
这个文件是用来实现自动挂载

======   swap  ========
类似于windows中的虚拟内存的概念
个人计算机 休眠 hibernate swap分区大小必须至少和内存大小一样
服务器 oracle 等应用对swap有特定要求，不创建无法安装数据库

swap划分除了安装系统过程中定义以外，在系统安装好后也可以后期再生成。有二种方式：
一种是基于新的磁盘，一种是基于文件。
[root@centos6 ~]# mkswap /dev/sdb1
用swap格式来格式化文件系统
[root@centos6 ~]# swapon  /dev/sdb1
激活swap分区，如果需要关闭swap分区，使用swapoff 
最后写入fstab中实现自动挂载
文档中：
/root/fileswap          swap           swap         defaults   0  0
设备名                  挂载点        文件系统         权限 



第二种方式通过生成空文件来实现swap挂载
[root@centos6 ~]#dd if=/dev/zero of=fileswap bs=1M count=100
[root@centos6 ~]# mkswap fileswap
[root@centos6 ~]# swapon  fileswap
最后也可以写入到fstab中

数据恢复
http://codebay.cn/post/1977.html?1490402903150 

lsof
系统进程会在后台为所有的文件提供一个文件描述符
[root@centos6 ~]# lsof | less
COMMAND     PID      USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME
FD 文件描述符  
cwd 当前的应用程序在哪个目录下工作
txt 可以执行的文件，比如二进制代码程序
mem 内存中调用的文件
0u  这个是文件打开后返回的一个整数值，u表示可以读写，r表只读，w可以写
type表示类型，dir（目录） reg（文件）
clk（字符文件）blk（块设备文件）
node 表示inode值
[root@centos6 tmp]#lsof /var/log/messages    查看系统中被进程占用的这个文件的信息
[root@centos6 tmp]# lsof |grep delete --color
查找最近被删除过的文件，前提是系统没有重启
根据文件描述符，找到/proc/进程号/fd/对应的文件描述符进行恢复
[root@centos6 tmp]#cat 4 > /var/log/messages

使用软件恢复
debugfs
r—linux
foremost：支持的文件系统类型很多，但有些特定格式的文件不支持
extundelete：支持ext文件系统。不能够实现同一个分区下的数据恢复

extundelete:
mount 查看挂载情况
mount -o remount，ro /dev/sda1      将挂载硬盘设为只读，防止数据被覆盖
stat /root/test                     查看被删文件顶层的inode
extundelete /dev/sda1 --inode 2     查看最近被删除的文件
extundelete /dev/sda1 --restore-all 恢复所有被删除的文件
extundelete /dev/sda1 --restore 3   按inode号恢复
恢复后的文件在家目录下，RECOVERED_FILES 


===========   2017/3/28  vim   ============
vim  编辑器之神 1991    vi 1976
emacs 神的编辑器    1975
文本文档  notepad++

IDE  集成开发环境

命令模式    esc返回到命令模式
i  进入插入模式，光标维持不动
I  进入插入模式，光标会停留在行首
a  进入插入模式，将光标后移一格
A  进入插入模式，光标移动到行尾
o  进入插入模式，向下新建一行开始
O  进入插入模式，向上新建一行开始
u  回退，对修改的返回
ctrl+r 前进
插入模式
末行模式 “：”保存、退出、定位、查询、修改
注：在任何模式下如果希望进行模式间的切换，都必须先返回到命令行模式，所以esc很有用

永久显示行号：在vim   ~/.vimrc中 添加set nu 保存
命令行模式下的定位：  n（数字） G

:q!  在vim中这个表示强制退出
:wq 保存并退出
:X  加密
:x  写入退出
末行模式下的内容替换
:s/lp/lg/   在当前行找到lp并替换为lg
:s/lp/lg/g  最后的g表示全局，这里的全局是指的当前行
:/XX  表示搜索文档中包含xx的内容。搜索出的内容会高亮显示，按n可以在所有内容中逐个向下查看，N向上查看
:6s/bin/Linux/g     6s表示修改第六行
:.,$s/bin/llll/g   .表示当前行，$表示最后一行
:%s/bi                  
:%s/^#//g   n/xxx/    %表示全局替换       ^表示开头，这里的理解是将整个文档开头带#的内容全部删除。（最后2个/没有空格，所以是删除）


gg  回到第一行
G   回到最后一行
复制 yy
黏贴 p
10yy  表示复制10行
剪切  dd  删除
r（紧跟你希望的字符）  替换一个字符
x  删除一个字符

M 光标移动到屏幕中央的行的第一个字符
H 光标移动到当前屏幕第一行的第一个字符
L 光标移动到屏幕最后一行的第一个字符
0 数字0直接到光标所在行的第一个字符
$ 到光标所在行的最后一个字符

块选择 ctrl+v
分屏 :sp
ctrl+w 上下箭头，切换（建议ctrl w w）

多文档编辑  vim file1 file2  
:next  进入下一个文档
:N   返回上一个文档
:files  查看当前所有打开的文档

yum whatporvides */unix2dos 
 
安装插件
mkidr -p .vim/bundle    （）
所有插件下载后都会安装在这目录下，包括我们需要下载的vundle
.vim是隐藏文件夹 ll -a 可查看


git 
yum install git 安装GIT
创建目录 mkdir mygit  
cd mygit/
git init                  在仓库目录中初始化git，生成.git文件
get add passwd            复制文件到mygit目录下之后，提交到仓库（暂存）
git commit -m “2017/3/30.1”  将仓库中的文件上传，-m是注释 （修改生效）
git diff                      对比文件

git  版本控制
a1.0  
a1.1 
a1.2
a1.3
版本     用户      日期    改变
1.0      zrq       2.21    第三行xx
2.0      zrq       2.23    删除第三行
3.0      lmx       2.28    改变了题目

git  最好的分布式版本控制系统
往Git版本库里添加文件的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的；
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，git commit就是往master分支上提交更改。
可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。如果还有不理解的可以先百度或谷歌，还不理解再问我。

[root@centos6 ~]# mkdir mygit
创建一个目录，mygit，这个目录作为我们的仓库
[root@centos6 mygit]# git init 
在我们的仓库目录中初始化，生成.git目录，这个目录用来追踪版本变化
[root@centos6 mygit]# cp /etc/passwd .
[root@centos6 mygit]# git add passwd
[root@centos6 mygit]# git commit -m "1936.1.0"   将仓库中的文件提交，参数m为注释信息
[root@centos7 mygit]# git diff passwd    对比文件的前后区别
[root@centos7 mygit]# git add  passwd  添加到仓库中
[root@centos7 mygit]# git status    显示当前被修改过的文件，根据有没有状态显示我们可以决定是否需要提交
[root@centos7 mygit]# git commit -m "this is 1.1"    提交文件到仓库
[root@centos7 mygit]# git status   再次查看当前是否存在需要提交的修改文件，显示clean
[root@centos7 mygit]# git log   显示从最近到最远的提交日志。
注：log里显示的commit id是sha1计算出来的，可以防止在多人协同时版本号的冲突。比如都用数字(1,2,3,4)做版本号。
[root@centos7 mygit]# git reset --hard d5047b134117e0ec38ed1468c40bb4e5b6071fe1   根据git log显示的commit版本号回退到最初
[root@centos7 mygit]# git log   再次查看版本，因为已经回退到最初，所以提交的日志也只有最初的
[root@centos7 mygit]# git reflog     查看reflog，这里记录每次命令操作，可以通过里面的commit id号前进到各个版本
oot@centos7 mygit]# rm passwd    删除文件
[root@centos7 mygit]# git checkout -- passwd   撤掉所有对工作区的修改，对于修改后没有提交的情况下可以撤销所有修改，对于误删的文件也可以恢复
[root@centos7 mygit]# git rm passwd   删除版本库中的文件
[root@centos7 mygit]# git commit -m "remove"  提交，文件从版本库中被删除
[root@centos7 mygit]# git reflog    查看历史记录
[root@centos7 mygit]# git reset --hard d5047b1   仍然可以通过git恢复



要让设置永久存在 必须在家目录下的.vimrc中添加命令
基本命令：
1 关闭兼容模式 （必须放在第一行）
2 set nocompatible
3 "自定义行号
4 set nu
5 "自定义中文
6 set encoding=utf-8
7 "设定支持的文件格式
8 set fileformats=unix,dos,mac
9 "设置搜索记录
10 set history=100
11 "搜索时忽略大小写
12 set ignorecase smartcase
13 "高亮显示 
14 set hlsearch
15 "文件类型侦测
16 filetype on
17 "设置主题
18 colorschem
19 "配对括号
20 set showmatch
21 "设置自动折行
22 set wrap
23 "显示当前位置
24 set ruler

=====   github文件下载  插件安装  ========
bundle文件夹下：git clone http：链接文件
打开一个vim
输入PluginInstall 安装插件
查看下载文件的REDME.md  按说明在.vimrc中添加设置 

======    gitbash使用  ==========
在windows中下载 gitbash 软件
在C盘中创建MyGit文件夹，作为本地仓库
在MyGit文件夹下，输入git init   初始化仓库
git remote add origin https://github仓库链接       与远程仓库建立链接
git remote -v           查看是否成功连接
git pull origin master    下载文件到本地仓库
修改文件
git status                查看文件是否被修改过（红色为修改过）
git commit -am “已修改”      提交并注释
git log                      查看所有版本号
git push origin master       推送到github仓库

========    用户管理     =========
/etc/passwd 
系统使用uid来表示用户名
使用git表示组名
uid=0  root 
uid从1到499都是系统用户，PAM模块会过滤500以内的uid用户
uid从500-65535，都是普通用户
root:x:0:0:root:/root:/bin/bash
用户名：密码：uid：gid：注释：家目录：shell环境

/etc/shadow   密码文件
用户名：密码（sha-256）：unix纪元时（1970-1-1）：最少使用天数：最多使用天数：密码到期前的警告天数：不活跃时间：失效时间

添加tom用户到root组
[root@centos6 ~]# gpasswd -a tom root
[root@centos6 ~]# id tom  查看系统中的用户
创建一个用户marry并加他加入到root组
[root@centos6 ~]# useradd -G root marry  

[root@centos6 ~]# newgrp  marry  将当前用户临时加入marry组

[root@centos6 桌面]# vim /etc/default/useradd 
这个文件是修改用户创建时的默认参数

[root@centos6 桌面]# useradd  -c "i am jack"  -s /sbin/nologin/  -d /home/jack    -g tom   -G  tom  -u 1000 jack 
创建一个用户jack

[root@centos6 桌面]# passwd jack  用户jack设置密码
[root@centos6 ~]# passwd -d jack 清空密码


passwd -l tom      锁定tom用户
passwd -u tom     解锁tom用户

finger tom  查看用户详细信息
chfn  tom  修改用户的finger信息
[root@centos6 ~]# chsh -s /sbin/nologin jack
修改用户登录的shell环境
添加组和删除组（不依赖用户）
[root@centos6 ~]# groupadd xx
[root@centos6 ~]# groupdel xx
[root@centos6 ~]# gpasswd -d jack tom 从tom组中删除jack
[root@centos6 ~]# gpasswd -a jack tom  添加jack到tom组

newgrp marry   临时把marry加入当前组，退出后失效


两种批量创建用户的方法：
1、for 循环添加
[root@centos6 ~]# for i in `seq 1 10`
> do
> useradd user$i
> echo "redhat" | passwd --stdin user$i
> done

2、通过文件来添加  /etc/passwd   /etc/shadow
pwconv    
pwunconv 取消shadow加密
newusers < *.txt 
chpasswd < *.txt
这样操作后用户不存在家环境，从/etc/skel中拷贝所有环境文件到每个用户的家目录

新建用户没有环境的解决办法：
cp /etc/skel/.* .            拷贝skel下所有文件到当前用户目录下


=========     密码规则     ================
root  
禁止远程登录   ssh禁止
设置足够强的密码，并且设置定期更改的时限
[root@centos6 ~]# vim /etc/login.defs 
这个文件可以设置密码的规则
[root@centos6 ~]# vim /etc/pam.d/system-auth
这个文件也可以设置用户登录的密码规则
 16 password    sufficient    pam_unix.so sha512 shadow nullok try_firs
    t_pass use_authtok remember=3
remember=3表示修改密码不能重复3次以内
[root@centos7 ~]# vim /etc/security/pwquality.conf 
设置密码的详细规则，针对所有用户
 51 minlen = 8   最小长度
 52 minclass = 1   最小类别，表示密码中最小的字符类别是几个，比如大写字母算一个，小写字母算一个，特殊符号算一个
 53 maxrepeat = 2  密码中允许出现的连续相同的字符最多是2个 
 54 maxclassrepeat = 4   密码中不允许出现连续的字符类别
 55 lcredit = 0   在新密码设置时最少需要包含几个小写字母
 56 ucredit = 0  在新密码设置时最少需要包含几个大写字母
 57 dcredit = 0 
 在新密码设置时最少需要包含几个数字
 58 ocredit = 0
在新密码设置时最少需要包含几个特殊字符
 59 maxsequence = 3
在新密码中不允许连续出现同类的字符3个以上
 60 difok = 8
在新密码设置中不允许和上一个密码的相同字符达到8个
 61 gecoscheck = 3
在新密码中密码的相同字符不能超过gecos信息的3个

[root@centos7 ~]# chmod 700 /usr/bin/su
禁止其他用户使用su

=========     FACL    =============
bob（读）  tom（写）  jarry（读写） jack（读x）
xx 
[root@centos6 tmp]# getfacl  xx  查看文件xx的acl规则
[root@centos6 tmp]#  setfacl -m u:bob:rwx xx  针对文件xx为用户bob设置acl，参数m表示修改
注：[root@centos6 tmp]# getfacl xx  查看权限
user:jarry:rwx			#effective:---
如果出现上述内容，那么facl规则没有生效，重新执行setfacl
[root@centos6 tmp]# setfacl -x u:jarry xx
删除用户的facl，参数x就是remove
[root@centos6 tmp]# setfacl -m u:bob:rwx rhce/
针对目录实现facl
[root@centos6 tmp]# setfacl -m d:u:bob:rwx rhce/
不论是谁在rhce目录下创建的文件或者目录，bob都具有默认的权限
[root@centos6 tmp]# setfacl  -x d:u:bob xx
删除的acl，但是默认的规则会保留
[root@centos6 tmp]# setfacl -k rhce/
删除默认的规则

vim .bashrc  启动时执行的代码放这里，开机只执行一次，如figlet
vim .bash_profile
每次打开终端都执行一次，环境变量放这里

====     sudo    ============
visudo或者vim /etc/sudoers  
 99 bob     ALL=(ALL)       ALL
    用户    主机名         命令
 99 bob     ALL=(root)      NOPASSWD: /bin/mount,/bin/umount
表示不输入密码

=======    PAM    ============
插入式验证模块 SUN
提供了一个API，用于系统的安全认证方面
pam模块所在位置 /lib64/security
/usr/share/doc/pam-1.1.1/txts  这个目录下存放了所有模块的说明文档
pam_access.so   比如这个模块就是控制用户登录的
[root@centos6 pam.d]# vim /etc/pam.d/sshd
查看这个pam插件的具体格式
       模块类型    	控制标记	调用的模块
模块类型：	   
认证模块auth   认证用户管理的
账户管理account   认证账户执行与访问的控制权限
密码管理password   设置密码、密码强度、更新密码
会话管理sessions 管理连接和断开
控制标记：
required  当带有这个标记的模块只有全部通过验证才表示鉴定完毕。如果有不符合的，模块不会返回信息
include  同时调用其他模块或脚本
sufficient 模块一旦验证成功，PAM立即返回成功标识，不再继续。如果失败，继续
optional 不论成功失败，都继续
requisite 失败即终止，其他跟required一样



/etc/security/access.conf    中设定模块设置
/etc/pam.d目录下存放了模块的所有环境文件


==========     互动    =================
w 查看当前的用户
who 查看当前用户，信息更简单直接
mesq n  关闭通知
mesq y  开启通知
wall “XXXX”  发送广播
write username  tty2  单向联系


============   进程管理   ==============
进程管理
linux是一个多用户多任务多线程的环境
进程 动态 是有一定的生命周期，随着程序动态产生和消亡
程序 静态 
前台 程序打开的进程只有在执行完成后才会在终端返回信息，这个过程中，用户不能执行其他新的进程
后台 程序启动时跟上& ，表示将进程放在后台执行。不用等待进程结束，用户也可以执行其他的新的进程。但这种方式不能用于交互式的进程
[root@centos6 ~]# jobs  查看后台工作的进程
[root@centos6 ~]# fg 1  直接将后台的进程拉到前台，后面的1是通过jobs查看到的后台进程序号

将一个前台的进程放到后台执行
ctrl + z 将一个进程停止并放到后台
bg 1  将后台停止的进程激活

[root@centos6 ~]# killall -9 ping  直接通过进程名称杀死进程。9表示强制
[root@centos6 ~]# kill -9 %1  杀死后台的第一个进程。%表示后台
[root@centos6 ~]# pidof firefox  找到进程的pid号 
[root@centos6 ~]# kill -9 13842 通过pid号杀死进程

脱机管理：我们在执行某一个进程时，有的用户是远程，有的是本地。在本地终端开启了一个进程供远程使用，这时如果因为crtl+c或者终端异常退出，这些情况都会导致远程用户无法使用这个进程。我们需要脱机管理这个进程。nohup可以忽略所有的挂断信号，继续执行。
[root@centos6 桌面]# nohup ping localhost
在指令前加上nohup，实现脱机管理
vim nohup.out  把过程显示在vim中

[root@centos6 ~]# ps  查看当前shell环境下的所有进程
[root@centos6 ~]# ps -aux 查看所有用的进程，
进程的状态：
S 可以中断的休眠状态
R 当前正在运行的状态
T 停止的进程
X 死掉的进程
Z 僵尸进程
s 表示包含子进程
N 表示低优先级
< 高优先级
l 多线程
+ 后台的进程
[root@centos6 ~]# ps -ex -O user,%cpu,%mem 指定格式输出
场景：快速定义出某一个进程

进程的执行顺序
调度策略会对系统进程进行排序，调度策略默认是根据优先级来排序的。

[root@centos6 ~]# top  实时查看系统的资源统计信息
load average: 0.00, 0.00, 0.00  平均负载，1分钟5分钟15分钟三个时间段cpu的负载情况
Cpu(s):  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0st
定义的是cpu的使用情况2
us表示用户空间占用cpu的资源情况
sy表示内核空间占用cpu的资源情况，由大的IO造成的
ni改变优先级的进程占用的cpu资源
id空闲的cpu资源
wa表示io在等待占用的资源
hi表示硬件终端占用的资源
si表示软件终端占用的资源
st steal time 表示虚拟cpu等待占用真实cpu的资源比

buffers(即将写入的)/cache（要读取的）  都是生活在RAM中 

PR 表示进程优先级（是由系统的优先系数（是内核主动分配的，用户不能修改）+nice得到）数字越小，优先级越高，ni为-20最优先执行
NI  nice值
VIRT  虚拟内存总量（swap+res）
RES 真实物理内存  
SHR 共享内存
nice值从-20到19，默认系统的nice是0.最大是-20.最小是19.
1 表示显示所有逻辑cpu的资源统计信息
x 对列高亮，默认是%cpu高亮，shift+>表示移动高亮到某一列
r  修改nice值来决定某一个进程的优先级
[root@centos6 ~]# renice 0 18862通过命令修改
[root@centos6 ~]# nice -n 19 cat /dev/zero > /dev/null 
在进程启动前就定义优先

系统资源的调用
netstat    查看当前主机上和谁在建立链接
netstat -n  表示禁止反向解析
           -tulp 查看tcp  udp   本地地址  
ss -ntulp  同上 ss -ntulp | grep sshd  查看ssh端口
free     查看内存
uptime  查看登陆的用户以及开机的时间等信息
vmstat 1 3    系统的完整报告，1秒执行一次 一共执行3次
si     磁盘每秒读入虚拟内存的大小，这个值如果大于0，说明物理内存已耗尽
so   每秒钟写入虚拟内存的大小
bi    块设备每秒接受的块数量
bo   每秒发送的块数量
in     每秒钟cpu的中断次数
cs    每秒上下文的切换次数

sar 非常重要的一个工具，可以通过它判断系统的整体性能，可以通过sysstat的安装获取这个工具
[root@centos6 ~]# sar -P ALL 1 2  查看所有逻辑cpu的状态报告，1秒钟一次，一共采样2次
[root@centos6 ~]# sar -r 1 2  对内存采样
[root@centos6 ~]# sar -b 1 2  对磁盘io采样
 tps      每秒向磁盘发送的请求
rtps     每秒向磁盘的读请求 
wtps      写请求
bread/s   每秒读取的数据量
bwrtn/s   每秒写入的数据量
[root@centos6 ~]# sar -d -p  1 2  显示具体块设备的状态，-p表示显示标准的名称，-d表示dev
[root@centos6 ~]# sar -n DEV 1 3  查看网卡的使用状态


2017/4/13 selinux 
selinux  美国国家安全局 fedora 联合开发
标签系统，为所有的文件和进程打上特定标签，只有符合标签的用户才能执行相应的进程，当执行相应进程时，只能触碰这些进程指定的文件或者目录
DAC  自主访问控制，通过文件或者目录的属性来实现读取
MAC 强制访问控制，核心思想就是任何进行企图在selinux中执行时，必须在安全配置策略中具有特定权限

MAC并不会取代DAC，它们可以并行运作，通常执行dac权限，系统再查看是否有MAC限制

selinux 的最终目标是针对一个进程是否具有打开某些特定文档的权限

selinux工作模式：
主体：进程（程序）
客体（目标）：文件、端口、设备
策略：targeted策略（红帽中标准的策略）只提供针对网络服务的限制、mls最严格的策略规则，不论本地还是网络都要进行限制、minimum是targeted的升级版本，针对有限的进程进行限制
安全上下文：security context定义了主体和客体的上下文必须一致的情况下才能安全访问
移动文件时安全上下文不变
复制文件时会生成新的安全上下文
创建文件时会根据系统的预置生成上下文
安装软件时上下文也会被系统定义
系统登录时pam模块就预置了pam_selinux.so来定义用户的上下文

上下文解读：
system_u:object_r:admin_home_t:s0
身份验证:角色:类型:mls使用的级别
身份验证：这块内容在targeted策略中并不是十分重要
          system_u管理员预设身份
		  unconfined_u  不做定义
		  user_u  普通用户
		  
角色：
		文件或者目录 object_r
         进程或者程序system_r
类型:
     程序  domain
	 文件资源  type

	
[hf@centos7 tmp]$ ls -Z  查看上下文
[root@centos7 tmp]$yum install setools\* -y            
[root@centos7 tmp]$yum install policyor utils-python-2.5-11.el7_3.x86_64 
安装上下文的查看工具

[root@centos7 /]# semanage fcontext -l | grep /etc/passwd  查看系统中某一个文件或者目录或者进程的上下文

[root@centos7 /]# ll /etc/sysconfig/selinux 
selinux的主配置文件
selinux的模式有三种（基于红帽系统）
enforcing  强制模式，对违规进行限制（rhel7默认）
permissive   宽容模式,只显示警告信息，不阻止
disabled   禁用selinux。必须重启系统才能生效

[root@centos7 /]# sestatus 查看当前selinux的状态信息
[root@centos7 /]# getenforce  查看当前的selinux模式
[root@centos7 /]# setenforce  设置selinux模式
这些设置都是临时有效，如果要永久生效，修改配置文件

实例：
安装apache服务器，默认安装好后，首页路径在/var/www/html目录下，假如我们修改了默认的路径，那么selinux会阻止我们访问这个路径下的首页
[root@centos6 tmp]# chcon -R -t httpd_sys_content_t /tmp/xx/
[root@centos6 tmp]# restorecon -R /tmp/xx/ 还原上下文
[root@centos6 tmp]# chcon -R --reference=/tmp /tmp/xx/ 引用tmp目录的上下文给xx
systemctl restat 

 2017/4/16
修改sshd的默认端口，selinux在enforcing模式下，会发现标签的变化，然后阻止用户的这种行为
cat /var/log/audit/audit.log |grep AVC | tail -5
查看审计日志中关于AVC的信息，AVC是selinux机制中的一个策略服务器
system status sshd
查看sshd服务当前的状态，如果端口修改，selinux开启的情况下，状态会报错
semanage port -l
查看系统中所有的进程对应的端口，以及对应端口的上下文
semanage port -a -t ssh_sport_t -p tcp 2222



selinux的布尔值
setsebool -a | grep http  查看所有http的布尔值
sestatus -b 

2017/04/16
修改sshd 的默认端口，selinux在enforcing模式下，会发现标签的变化，然后阻止用户的这种行为。
[root@centos7 ~]# cat /var/log/audit/audit.log |grep AVC | tail -5
查看审计日志中关于AVC的信息。AVC是selinux机制中的一个策略服务器
[root@centos7 ~]#systemctl status sshd  查看sshd服务当前的状态，如果端口修改，selinux开启的情况下，状态会报错
[root@centos7 ~]# semanage port -l 查看系统中所有的进程对应的端口，以及对应的端口的上下文
[root@centos7 ~]# semanage port -l | grep 22
查看端口22的标签
[root@centos7 ~]# semanage port -a -t ssh_port_t -p tcp 2222
将端口2222的标签修改为ssh的标签

selinux的布尔值
[root@centos7 ~]# getsebool -a
查看系统中默认的所有的布尔值
[root@centos7 ~]# sestatus -b 
使用sestatus工具也可以查看布尔值状态
[root@centos7 ~]# setsebool -P ftpd_anon_write on  永久设置一个布尔值开关，不加p参数表示临时生效

[root@centos6 booleans]# yum install policycoreutils\* 
selinux的图形化管理工具

[root@centos6 booleans]# yum install setroubleshoot 
selinux的排故工具

BASH
unix shell
shell 壳  shell是内核（linux）的壳，负责将用户的指令传递给内核，内核在控制硬件。
shell是一个命令解释器，是c语言
第一个shell是unix里的sh
几乎所有的linux发行版中默认的shell都是bash
shell有很多种，每种都带有自己的特定的功能和优点
sh：AT&T 贝尔实验室 快速，简洁，运维使用，一般现在不使用，可以用于单用户模式
bash：是bsh的升级版，bash整合了csh和ksh的功能，特点是功能强大，有很多特性，比如自动补全，拼写更正，颜色分类等等，是最常使用的版本
tcsh ：不是标准的unix shell，提供了很多特殊的功能，但不常用
csh：伯克利大学开发的，特性众多，但据说是执行效率不高
ksh：AT&T开发，功能已经被bash整合
zsh：终极shell。
powershell：windows下的shell
linux bash 通用，功能较均衡，执行效率快
mac  zsh 
windows powershell 

[root@centos6 ~]# echo "today is" ; date ; cal
多个指令可以使用；隔开，第一个执行完会执行第二个，以此类推

[root@centos6 ~]# echo "scale=10；33/23" | bc 
用scale控制计算精度，这里表示定义小数点后的10位
[root@centos6 ~]# echo "obase=10；101010" | bc
用obase定义转换的进制，这里是将101010转为10进制
[root@centos6 ~]# echo "10^10" | bc  平方
[root@centos6 ~]# echo "sqrt（100）" | bc 开根 
[root@centos6 ~]# echo "1+1" | bc 

单引号'' 单引号中被包裹的不论是什么都原样显示
双引号"" 双引号中被包裹的内容除了会被原样显示之外，还能识别一些特殊的函数符号，比如$、\、``
反引号`` 
[root@centos6 ~]# echo Today is `date` 在linux中反引号起到命令替换的作用。将字符串中的某一个被包裹的变为指令（指令存在）

变量
~   家目录，当前用户的家
在bash中，变量使用时基本不需要声明类型，每个变量的值都是字符串
echo $PATH
echo $PS1
格式：变量名=值
注：变量不能是数字开头，等号两边不能有空格
本地变量  只在当前的shell环境中定义，不会影响其他shell或者子shell   xx=24 
查看变量一定是用$标记，变量名区分大小写，系统默认的变量一般都是大写
[root@centos6 ~]# unset xx  取消变量xx
环境变量   sshd   
[root@centos6 24]# pgrep sshd  获取某一个进程的pid
\0  分割符
\n 换行分割
[root@centos6 ~]# export   查看当前的环境变量
[root@centos6 ~]# env  查看当前的环境变量 
[root@centos6 ~]# export xx=24  设置xx为环境变量
[root@centos6 ~]# declare -x zz=10  定义环境变量
[root@centos6 ~]# declare -i bb
定义变量bb为整数，如果取消+i
[root@centos6 ~]# declare -r aa  定义只读变量

位置变量：
$0   执行脚本或者指令的名称
$1   第一个参数
$2   第二个参数
类推
$@   所有的参数都显示
$#  　参数的总数
[root@centos6 tmp]# echo ${13}  查看变量名时用{}内容是一个整体

shell中的read（交互）
[root@centos7 ~]# read xx
read是表示从系统中读取，将获取到的信息赋值给xx
[root@centos7 ~]# read   不写变量名，赋值给默认的变量REPLY
[root@centos7 ~]# read -s password  不进行回显输入
[root@centos7 ~]# read -t 2 p
设定timeout超时时间
[root@centos7 ~]# read -p "Enter input:" -d "￥" xx  参数-p表示显示信息，-d定义中断符

数组
普通数组（下标数组）
[root@centos6 tmp]# xx=(aa bb cc dd ee)
[root@centos6 tmp]# echo $xx
[root@centos6 tmp]# echo ${xx[0]}
[root@centos6 tmp]# echo ${xx[@]} 查看所有数组
[root@centos6 tmp]# echo ${！xx[@]} 查看所有数组的下标
[root@centos6 tmp]# echo ${#xx[@]} 查看所有数组的数量

关联数组：通过自定义的字符串来建立索引
[root@centos6 tmp]# declare -A xx
首先定义一个关联数组的类型
xx=([name1]=aa [name2]=bb [name3]=cc [name]=dd)
echo ${xx[name3]}

变量内容的删除、替换
[root@centos6 tmp]# r=${path#*/bin:}
一个#表示从前往后执行最短匹配
二个#表示执行最长匹配
%表示从后往前最短匹配
%%表示从后往前最长匹配

[root@centos6 ~]# aa=${xx-"error"}
如果xx这个变量不存在，aa的变量值就是error，如果存在，就是xx的值
注：空值和不存在是有区别的
[root@centos6 ~]# aa=${xx="error"}
如果存在就赋值给aa
[root@centos6 ~]# aa=${xx?"error"}
如果不存在，将问号后面的内容赋予变量，一般作为警告表示。

[root@centos6 tmp]# set -u  开启变量提示功能，会判断变量是否存在
[root@centos6 tmp]# set +u  取消提醒
[root@centos6 tmp]# set -x   开启回响模式
[root@centos6 tmp]# set +x   关闭回响模式

[root@centos7 tmp]# vim /etc/issue
设置登录前的信息
\d 显示当前时间
\n  显示当前网络信息
\v   显示操作系统版本信息

 .bash_profile   用户登录时执行，设置用户的环境变量，主要配置还是来自.bashrc
 .bashrc  设置用户的bash环境，每打开一个shell都会读取
 /etc/profile
 
 
通配符：
[]  代表一个字符
[a-z]  26个字母中匹配一个
[a\-z]  匹配a、 - 、 z
[0-9]  匹配数字0-9中的一个
[!0-9]  除了数字
?  匹配一个任意字符
*  匹配任意字符，任意长度
[root@centos7 tmp]# ls [0-9][!0-9]e?[!a-z]*.mp3

重定向
stdin  0
stdout  1  
stderr   2

输出重定向  > 
[root@centos7 tmp]# date > xx
先检查右边是否有文件存在，如果没有，创建，如果有，清空内容，将左边的结果输出到右边的文件中，如果想追加，使用>>
不论是>或者>>，都只会重定向正确的内容，如果要定义错的输出，可以使用2>或者2>>
假设希望不论正确还是错误都进行输出，使用&>
[root@centos7 tmp]# ca1 >>  xx 2>&1
将错误的结果当成正确的进行重定向
[root@centos7 tmp]# cal >>  xx 1>&2
将正确的结果当成错误的重定向

输入重定向
[root@centos7 tmp]# wc -l < /etc/passwd
将输入重定向到passwd文件，统计行数
[root@centos6 tmp]# mail -s "passwd" root < xx
将xx文档的内容作为邮件内容发送给root
tar 'a-z' 'A-Z' < /etc/passwd   把passwd中的小写字母换成大写
tar 'a-z' 'A-Z' < /etc/passwd & >xx  

here文档：heredoc
[root@centos6 tmp]# cat > server.repo << EOF 
>  [base]
>  name=base
>  baseurl=file:///mnt/
>  enabled=1
>  gpgcheck=0
>  EOF

和或
command1 || command2  一个为真，整体为真
command1 && command2 两者都为真，整体为真

[root@centos6 tmp]# grep tom /etc/passwd --color  过滤我们想要的内容
[root@centos6 tmp]# grep -inv root /etc/passwd --color  参数i表示忽略大小写，n表示显示行号，v表示反向过滤

管道：将前面命令执行的结果作为后面命令执行的依据
cut 剪切  参数-d 定义一个分隔符 ，参数-f定义分隔的是第几段
[root@centos6 tmp]# ifconfig eth0 | grep "inet addr" | cut -d ":" -f2 |cut -d " " -f 1

[root@centos6 tmp]# last | cut -d" " -f 1 | sort   | uniq -c   查看最近一次登录的用户，uniq表示对最近的重名用户统计

[root@centos6 tmp]# paste aa bb > xx
文档内容的合并
split -b 100k service xx 
将service切割成100k的6个以xx为开头的文件
cat xx* > sercive    合并以xx开头的文件并重定向到service

2017/4/18  正则表达式
是用来模糊匹配文本的规则的处理工具
与grep  egrep 结合使用 
^tom        匹配文本中开头是tom的内容
tom$        匹配尾部
.              匹配任意一个字符
【】     to【am】匹配toa和tom
【^】   9【^78】不能匹配97 和98   
【-】    8【0-9】可以匹配80~89
？          匹配前面的项目0或者1次   to？m    
+             匹配前面的项目0或者多次
*              匹配前面的项目多次
（）     ma（irt）x
{n}               [0-9]{3}   [0-9][0-9] [0-9]   
{n,m}          至少匹配N次  【0-9】{2,4}  
|                aaa{1st|2nd}    匹配aaa1st和aaa2nd        

[root@centos6 tmp]# grep tom xx.txt  --color
[root@centos6 tmp]# grep tom$ xx.txt  --color
[root@centos6 tmp]#grep tom.. xx.txt  --color
匹配tom后面包含2个字符的行，不可以匹配换行符 
[root@centos6 tmp]# grep 'tom.*'  xx.txt  --color
匹配tom后面有任意字符的内容，加引号防止解析错误

* + 贪婪型元字符，过滤时作最长匹配
[root@centos6 tmp]# egrep 'btom+' xx.txt --color
？  懒惰匹配
[root@centos6 tmp]# egrep 'btom?' xx.txt --color

[root@centos6 tmp]# egrep '[Tt]om' xx.txt  --color   匹配Tom或者tom

[root@centos6 tmp]# egrep '^[^Tt]..' xx.txt --color  排除开头T或者t的行

如果我们需要匹配的是一个单词的开头，可以使用\<,
单词的结尾用\>
[root@centos6 tmp]# egrep '\<tom' xx.txt  
[root@centos6 tmp]# egrep 'tom\>' xx.txt  --color

[root@centos6 tmp]# egrep '\btom\b'  xx.txt  --color
精确定位只包含tom单词的行，tom的前后均没有其他字符

正则表达式中我们还可以做标签，先定义一个符合规则的标签，然后我们可以在后面引用这个标签的内容。做标签使用\(\)

如果希望对出现的匹配的字符做限制，可以用\{n\}
[root@centos6 tmp]# grep 'tom.\{5\}' xx.txt  --color

grep -E和grep -P中可以用\d  等同于 [0-9]

邮箱
xxx@xx.XX

[root@centos6 tmp]# grep -E '[a-z0-9]+@[a-z0-9]+\.[a-z]+' /var/log/maillog  --color
邮箱的匹配

2017/04/20  sed和awk
sed 流编辑器   vim 属于屏幕编辑器
sed 优点:一边编辑一边调用，节省内存
sed在编辑时，首先把文档中的一行读入内存，这行内容我们是可以编辑的，这个内存的行叫模式空间。编辑完成后，这行会输出到屏幕，同时清空模式空间的内容，然后读入下一行，重复
这种修改默认模式下是不会修改源文件内容的

sed ‘range command’ filename
[root@centos6 tmp]# sed '1d' passwd  |more 
删除文档passwd中的第一行内容。d是指令，表示删除
[root@centos6 tmp]# sed 'd' xx.txt   删除所有内容
[root@centos6 tmp]# sed 's/tom/TOM/g' xx.txt 
使用s指令表示在文档中搜索并替代
[root@centos6 tmp]# sed 's/tom/xxxx/2' xx.txt 
针对tom内容进行标记，替换模式空间中的第二个tom内容，替换为xxxx
[root@centos6 tmp]# sed '1s/ /--/2' bb  将文档中的第二个空格修改为--。
[root@centos6 tmp]# sed 's/linux/-&-/1' bb  &符号表示引用前面的关键词，这里会将所有行中第一个linux变为-linux-
[root@centos6 tmp]# sed '{s/linux/Linux/;s/Linux/rhel7/g}' bb
如果对模式空间中的内容进行对次指令的调用，要用{;}格式
[root@centos6 tmp]# sed 'y/id/12/' bb  针对单个字符的修改，不需要添加g，将所有的i变为1，所有的d变为2
[root@centos6 tmp]# sed '/USERCTL/a\IPADDR\=192.168.1.1' ifcfg-eth0   a表示追加，在关键词的后面添加新的内容。这里是在userctl行后添加新的内容。a是往下添加，i是往上添加
[root@centos6 tmp]# sed '/ONBOOT/c\ONBOOT=no' ifcfg-eth0 
直接使用c来修改某一行内容
[root@centos6 tmp]# sed -i '/BOOT/a\ONBOOT=yes' ifcfg-eth0 
使用参数-i表示直接在源文件中进行修改
[root@centos6 tmp]# sed '/^BOOT/{=}' ifcfg-eth0 
定义关键词属于哪一行，{=} 指定行号
[root@centos6 tmp]# sed '/^BOOT/{n;s/yes/no/}' ifcfg-eth0 
n表示读取下一行，首先找出^BOOT内容行，然后读取下一行修改

注：N表示多行模式空间，会读取模式空间的行后继续读取，并且不删除当前空间的行，如果使用N，^不再表示行的开头，$不再表示结尾，它们分别表示模式空间的开头和结束

sed除了模式空间以外，还有一个保持空间的概念，其实就是缓存。使用模式空间时，创建一个副本，如果对模式空间操作，保持空间中的内容可以和模式空间互换

awk  主要用来对文档进行排版，使用非常灵活，是shell脚本的又一个利器。
cut -d： -f  4 /etc/passwd
$0(当前行)  $1 $2 
语法： awk ‘{range，command；command2}’  filename

[root@centos6 tmp]# awk -F: '/^jarry/{ print $3 }' passwd 
501
[root@centos6 tmp]# awk -F: '$1~/jarry/{ print $3 }' passwd 

[root@centos6 tmp]# awk 'BEGIN{FS=":"}$1~/jarry/{ print $1,$7}' passwd  

2017/4/23  shell脚本
./xx.sh   打开一个子shell执行脚本
bash xx.sh    打开一个子shell执行脚本
source xx.sh    在当前的shell中执行

数值的比较
中文              单词             字符
等于              -eq               ==
大于              -gt                >
大于等于          -ge               >=
小于              -lt                <
小于等于          -le               <=
不等于            ！-eq             !==
判断1：test
[root@centos7 tmp]# aa=5
[root@centos7 tmp]# bb=15
[root@centos7 tmp]# test ${aa} -lt ${bb}
[root@centos7 tmp]# echo $?
判断2：[ ]
[ -f ]  判断文件是否存在
[ -d ]  判断目录是否存在
[ -r|w|x ] 判断读写执行权限
[ -z ] 判断字符是否存在

条件判断
1、简单条件判断
if  ； then
fi
2、一个条件判断，分成功和失败分别执行
if  ； then
else
fi
3、多条件判断
if  ； then 
elif  ；then
else 
4、case....esac
case  变量  in
      值1）
	  命令；；
	  值2）
	  命令；；
esac

函数 function
alias rm=“/tmp/sh”

循环  while
while  判断（满足）
 do
    XXX
 done 
实例：  
  1 #!/bin/bash
  2 nu=0
  3 while [ ${nu} -lt 10 ] 
  4 do
  5         let nu++
  6         echo ${nu}
  7 done

until不定循环（不满足条件循环）

练习：
写一个脚本统计目录中的文件数量
写一个批量创建用户的脚本
写一个统计系统中普通用户数量的脚本
写一个脚本，判断系统中有哪些端口被开放

远程系统管理与备份            
ssh的使用
telnet rlogin ssh ssh2
[root@centos7 tmp]#ssh root@c6 
[root@centos7 tmp]# scp xx.sh root@c6:~   远程拷贝
rsync一般用于备份

1、出于安全考虑，实际工作中很少使用账号密码（基于口令的认证）的方式登录ssh，更多的是通过密钥的方式
2、更改ssh的默认端口
3、禁止root登录

A----B
基于口令的认证：用户名 密码（短语）
A希望和B连接，B发送公钥给A，A用B的公钥加密登录B的密码，B通过私钥验证A的信息，成功就可以放行
基于密钥的认证：创建公钥和私钥
A和B事先已经通过安全的方式获取对方的公钥，并且存放在本地。A希望和B建立连接， B会随机产生一个数字然后用A的公钥加密，再把这个信息发送给A，对比一致性。

hydra  medusa  爆破工具  
john 开膛手  破解hash的（shadow）
ssh安全：
1、密码尽可能强大 （大小写、数字、字母、特殊符号、短语、长度最好14位以上）
2、修改默认端口号
[root@centos7 ~]# vim /etc/ssh/sshd_config 
3、禁止root登录
4、查看日志  /var/log/btmp   这个日志记录了登录失败的信息，如果文件大小不断被放大，可能被爆破
5、fail2ban


系统备份：
完整备份：备份所有的数据，同时将备份过的文件的属性进行标记，标记为备份.缺点：备份的数据随着时间的增长，会越来越庞大，耗时会越来越长，资源利用高  优点：数据恢复次数少，任何时间段的数据一次恢复
差异备份：只备份自上一次完全备份后增长的数据，对已经有备份标记的文件不进行备份（也不清楚标记属性），对自身备份的文件也不进行标记。缺点：备份的数据随着时间增长，越来越庞大，耗时越来越长。
增量备份：备份自上一次（完全备份、差异备份、增量备份）之后有变化的数据。备份后的文件打上标记。
优点：备份的数据量小，备份速度快，资源利用率低
缺点：数据恢复的次数由备份的次数决定，恢复的次数较多

一个月做一次完全备份，每周做一次差异备份，每天做一次增量备份

dump   专门用于针对ext日志式文件系统进行备份
xfsdump  专门针对xfs日志式文件系统进行备份
以上两个备份工具都是针对磁盘进行备份
备份级别用数字表示，从0-9.
0  完全备份
从低往高表示增量备份
从高往低表示差异备份

[root@centos6 yy]# mkisofs -o winxp.iso *.dump winxp  
制作镜像文件

归档：cpio，也可以用来备份数据，这个工具自身并不知道需要备份的数据有哪些，一般都是和管理结合使用
[root@centos6 yy]# find . -iname \*.dump | cpio -o > test.cpio
参数o表示的打包，如果解包用i。
[root@centos6 xx]# cpio -i  < test.cpio 
解档
   
   2017/4/27  实时备份
rsync （只传输差异变化） scp
数据同步有两种方式：推 拉
拉：从服务器端拉取数据，对服务器的开销很小，完全取决于客户端的操作，不能真正做到同步，非实时。传输速率慢
推：服务器的开销大，但因为主动方是变化端，所以可以做到同步。
rsync参数：
-a  归档模式
[root@centos7 xx]# rsync  -azP root@192.168.24.240:/tmp/xx vmware-root/ 
从服务端拉取/tmp/xx目录下的所有文件

inotify 是内核2.6以后自带的一个机制，提供了对文件的事件的监控，比如文件的修改，删除，添加，属性的调整。
[root@centos7 tmp]# ll /proc/sys/fs/inotify/
max_queued_events     最大的监控队列
max_user_instances    最大的实例
max_user_watches      每个用户实例最多监控的文件数量
[root@centos7 tmp]# sysctl -p   将修改写入/etc/sysctl.conf文件中
[root@centos7 tmp]# inotifywait -mrq -e move,create,delete,modify test/    对目录test产生的事件进行监控，事件有移动，创建，修改和删除。
实时同步脚本：
 21 SRC=/tmp/test/
 22 DST=root@c6:/tmp/xx
 23 inotifywait -mrq -e move,create,delete,modify ${SRC} |while read line 
 24 do
 25         rsync -azP --delete ${SRC} ${DST}
 26 done

监控脚本
 19 pgrep minitor.sh
 20 if [  $? !=  0 ] ;then
 21          /tmp/test/minitor.sh
 22 fi 

磁盘配额
ntfs
[root@centos6 tmp]# mount -o usrquota,grpquota /dev/sdb2  xx/
磁盘配额功能必须在挂在前赋予
[root@centos6 xx]# quotacheck -cug /dev/sdb2 
创建基于用户和组的配额数据库
[root@centos6 xx]# quotaon -u /dev/sdb2 
针对用户激活配额功能 
[root@centos6 xx]# warnquota   打开邮件告警功能


2017/05/02  RAID
廉价磁盘冗余阵列   1987年 伯克利大学 
优点：提高读写性能；容错性好；更有效的利用磁盘空间；提升服务器的整体性能

硬阵列：hard   通过阵列卡实现
软阵列：soft   通过软件实现
lun 逻辑单元号：地址编号，系统通过这个编号可以找到相应的物理设备

EMC NETAPP 华为  曙光（长虹）

去I（ibm）O（oracle）E（emc）  sun mysql  java xfs 

RAID0:将数据分块后按序写入各个磁盘。所有的I/O是平均分配给各个物理磁盘的，性能是所有阵列中最好的。缺点：一个硬盘的损坏，会导致所有数据的丢失，造成灾难性的故障。所有阵列中安全性最低，通常不建议使用。
应用场景：需要高带宽的应用、图像编辑等

RAID1：将两块硬盘当成一块硬盘使用。优点：对磁盘进行了冗余。缺点：磁盘利用率低。
应用场景：财务、个人用户（金融）

RAID4：至少需要三块磁盘才能实现。数据分别按序放入前两块磁盘中，第三块磁盘作为校验盘，对前两个磁盘中的数据进行校验并存放。所以第三块磁盘（校验盘）就是热点。

RAID5：至少需要三块磁盘，采用分布式的校验，将校验盘平均分布在阵列组中的每块磁盘设备上，在相邻的条带间循环分布。优点：读写性能好，有冗余功能，磁盘利用率75%。缺点：同时两块硬盘损坏
应用场景：服务器

RAID6：最少需要4块硬盘实现。使用多种分布存储的校验方式实现，是raid5的一种扩展方式。通常都是带有两种校验方法。优点：可靠性高，允许多块硬盘故障。读性能好，写性能一般。缺点：磁盘利用率低于raid5。

RAID10：先进行raid1，将raid1后的磁盘阵列后再进行raid0。优点：冗余性能好，写性能高于raid5，读性能好。缺点：磁盘利用率低，部署成本高。
应用场景：适合有大量数据存储要求高速读写的场合

实例：
[root@centos6 ~]# cat /proc/mdstat   查看当前是否存在阵列
[root@centos6 ~]# mdadm -C /dev/md0 -a yes -l 5 -n 3 -x 1 /dev/sd{b,c,d,e}
参数C表示创建，-a表示是否启用标准化的名称（标准名称为md0等），-l表示使用哪种阵列，-n表示使用的硬盘数量，-x表示是否启用热备盘。
[root@centos6 ~]# mdadm -D /dev/md0   查看阵列的属性，创建成功后会出现一块新的硬盘，名称按事先定义
[root@centos6 ~]# mdadm -E /dev/sdb  查看某一块硬盘在阵列中的角色
[root@centos6 test]# mdadm  /dev/md0 -f /dev/sdb  调试模拟阵列中的某一块硬盘故障
[root@centos6 ~]# watch -n 0.5 'cat /proc/mdstat'  监控
[root@centos6 test]# mdadm /dev/md0 -r /dev/sdb  将故障盘热移除
[root@centos6 test]# mdadm /dev/md0 -a /dev/sdb  添加新的磁盘到阵列中
删除阵列步骤
[root@centos6 tmp]# umount /dev/md0   卸载使用中的阵列
[root@centos6 tmp]# mdadm -S /dev/md0   停止阵列
[root@centos6 tmp]# mdadm -A /dev/md0  /dev/sd{b,c,d,e}
重新恢复阵列

LVM逻辑卷
只属于类unix系统

pv  物理卷   查看物理命令：pvscan
                         创建pv 命令：pvcreate /dev/md0p{1,2,3,4}      4块硬盘
vg   卷组       查看卷组命令：vgscan
                        创建卷组命令：vgcreate vg0（卷组名字）/dev/md0p{1,2,3}
						如果使用参数-s 后面跟上PE大小
                        PE    卷组的大小是由PE组成的，PE也是vg的最小单位，默认大小是4M
						在有足够的物理卷时，添加卷组：vgextend vg0 /dev/md0p4 
lv     逻辑卷  查看逻辑卷命令：lvscan 
                         创建逻辑卷命令：lvcreate -n lv0 -L 1000M vg0 
						 添加115个PE到lv0逻辑卷：          lvextend -l  +115 /dev/vg0/lv0            
                          激活添加PE的命令：                 resize2fs  /dev/md
					     
						  lvreduce -l -265 /dev/v
						  
快照
lvcreate -n sn(快照名字) -L 400M -s /dev/vg0/lv0
mount /dev/vg0/sn test/   挂载快照，恢复数据
lvremove -f /dev/vg0/sn     先卸载，再删除快照

计划任务
1.at   一次性任务  （atd守护进程） 
at -l 查看计划任务
at 05/06/2017
at> reboot
at><EOF>
2017年5月6号重启

at now + 12minutes
at>poweroff
at><EOF>

at 10am tomorrow
at>sad

atrm 3 删除第三个计划任务

计划任务
1、at 一次性任务  （atd）
at now + 12minutes 
at 10am tomrrow
at 6am + 3days
vim /etc/at.allow
vim /etc/at.deny 

2017/05/07  
crontab   周期性、循环往复执行的计划任务
[root@centos6 ~]# crontab -l -u tom  查看特定用户是否存在计划任务
[root@centos6 ~]# crontab -e  设置当前用户的计划任务
[root@centos6 cron]# pwd     
/var/spool/cron   这个目录下记录的就是用户的计划任务文件
#分钟 小时  天    月     周    命令
*      *     *     *      *    /usr/bin/echo hello
#每天早晨7点执行一个
0      7     *     *      *    /usr/bin/bash xx.sh
#每个工作日凌晨2点执行脚本任务
0      2     *     *     1-5   echo xxx
#每天凌晨3点到3点半每隔5分钟执行一次任务
0-30/5 3     *     *      *    echo xxx
#在2月开始1号到10号以及15号每天9点45执行任务
45     9  1-10,15  2      *    echo  xxx
#凡是满31的月从1号到10号，以及15号的晚上8点25和非工作日执行
25    20   1-10,15  1,3,5,7,8,10,12  6,7   echo xxx
0     *    *    *    *   /etc/init.d/sshd restart

[root@centos6 cron]# vim /etc/cron.deny   将tom用户放入黑名单，tom不再具备使用crontab的权限
[jarry@centos6 ~]$ vim /etc/cron.allow  使用白名单，默认不存在，手动创建

[root@centos6 ~]# cat /var/spool/anacron/cron.daily 
查看最近一次哪一天执行的anacron


Daemons 系统服务
守护进程 
独立的：每一个服务会自己监听自己的端口，比如web服务器就会有一个进程监听自身的80端口
非对立：super daemon 通常都是由xinetd统一管理
端口：/etc/service    1-1024以下都是常用端口

[root@centos6 init.d]# yum install xinetd   安装xinetd，用它来管理其他的不具备守护进程的服务
[root@centos6 init.d]# cd /etc/xinetd.d/   非独立服务存放路径
每一个daemons都有一个配置文件，daemons的启动会根据配置文件中的设定来执行，所以每次修改完配置文件如果希望daemons按需求执行，需要重启服务。同样，xinted也是一个daemons，它的配置文件在/etc/xinetd.conf
[root@centos6 ~]# vim /etc/xinetd.conf   配置xinetd

      cps             = 50 10   同一秒内最多允许50个链接，如果超过，对外服务暂停10s
        instances       = 50
		同一个实例最大链接数50个
        per_source      = 10
同一个来源最多10个

tcpwrapper防火墙
[root@centos6 ~]#ls /etc/hosts.    
hosts.allow  hosts.deny 
allow提供的是白名单，deny提供的是黑名单
in.telnetd: 192.168.24.4:spawn wall "xxxxxxxxx"  
匹配成功后执行spawn后的指令

in.telnetd: 192.168.24.4:twist wall "xxxxxxxxx"
twist的语法不能放在allow名单中，因为twist是匹配成功后立即终止并执行twist后的指令


日志服务器
1.日志服务器
rsyslog代替了syslog
cat /var/log/dmesg
cat /var/log/

systemctl status 

vim /etc/rsyslog.conf     日志服务器的主配置文件
标准格式：
事件.级别                        日志记录的位置


事件分类：
authpriv                和认证有关的事件  /var/log/secure 
mail                      邮件系统有关的事件            
cron                     计划任务有关的事件
kern                     内核有关的事件
syslog                  日志服务有关
news                   新闻系统有关的事件
uucp                   从一个系统拷贝到另一个系统有关的事件
daemons            守护进程有关的事件
local0-locacl7       用户自定义的事件

级别：  由高往低
emerg        恐慌级别   
alert           紧急状态
cirt             临界，有严重错误出现
err             错误
warning      警告
notice          需要关注
info             提供所有信息（正常消息）
debug         开发者使用的调试级别
显示所有级别使用*
     *.info            /var/log/test.log 
      .=              前面的事件必须等于后面的级别才记录日志
	  .!               表示不等于，除了定义的级别以外的都记录
	  mail,!err       mail事件除了err的级别都记录
	  
	  
	  
2017/05/09  日志服务器
1、日志服务器
rsyslog替代了syslog（默认集成）
[root@centos6 ~]# cat /var/log/dmesg   查看内核启动
[root@centos6 ~]# cat /var/log/maillog  查看邮件的日志
[root@centos6 ~]# cat /var/log/messages  记录系统服务日志
[root@centos6 ~]# cat /var/log/cron  显示所有计划任务的日志
[root@centos6 ~]# cat /var/log/secure  查看用户登录信息
[root@centos6 ~]# cat /var/log/btmp  记录所有登录失败的信息
[root@centos7 ~]# systemctl restart rsyslog.service 

日志服务器的配置
[root@centos7 ~]# vim /etc/rsyslog.conf 
标准格式：
事件.级别                日志记录的位置            

事件分类:
authpriv   和认证有关的事件
mail       邮件系统有关的事件
cron       跟计划任务有关的事件
kern       内核有关的
syslog     日志服务有关
news       跟新闻系统有关的事件
daemons    跟守护进程有关的事件
local0-local7    用户自定义事件

级别：从高往低
emerg  恐慌级别
alert  紧急
cirt   临界，有严重错误出现
err    错误
warning警告
notice 需要关注
info   提供所有信息（正常消息）
debug  开发者使用的调试级别

日志记录的规则
*.info                    /var/log/test.log
.=    前面的事件必须等于后面的级别才记录日志 
.!    表示不等于，除了定义的级别以外的都记录

[root@centos7 log]# vim /etc/rsyslog.conf   自定义日志
local0.*                                 /var/log/ssh.log
[root@centos7 log]# vim /etc/ssh/sshd_config   修改ssh的日志事件类型
 43 SyslogFacility local0
重启服务生效

日志的格式：
May  9 19:09:07 centos7 sshd[14114]: Server listening on 0.0.0.0 port 22.
datetime
hostname
server[pid]
action

[root@centos7 log]# tailf debug.log  实时查看日志
[root@centos7 log]# journalctl  -p  emerg  只查看和恐慌级别有关的日志
[root@centos7 log]# journalctl  --since today  只查看和今天有关的日志
[root@centos7 log]# journalctl --since "2017-05-01" --until today
查看特定时间段的日志
  
2、中央日志服务器
客户端配置如下：@@表示tcp连接，@表示udp连接
local5.debug             @@192.168.24.240:514
服务器端开启：  如果修改默认的端口514，需要注意selinux
$ModLoad imtcp
$InputTCPServerRun 514

3、日志备份

/var/log/messages   当前日志
一周  messages3 
/var/log/messages  新的
一周  messages2
/var/log/messages  新的
一周  messages1
/var/log/messages  新的

 logrotate   这个是系统预装的日志轮循工具
[root@centos7 ~]# vim /etc/logrotate.conf   日志轮循配置文件
 35 /var/log/messages {     定义要求回滚的日志
 36     weekly          每一周轮循一次，可以用size=10M
 37     rotate 4        保留4份，第五份开始删除时间最久的那份
 38     compress        要求归档时用gzip压缩
 39     delaycompress   延时压缩，对当前的最近的要轮循的日志不压缩
 40     missingok       如果日志不存在忽略
 41     notifempty      如果日志为空不轮循
 42     create 0664 root root   轮循后生成新的日志
 43     postrotate       这个参数和endscript是一个整体，它们中间可以跟上指令，下面的指令表示在轮循完成后重启rsyrlog
 44         /usr/bin/killall -HUP rsyslog   
 45     endscript                
 46 }  

4、日志分析
AIDE    yum install aide  -y      
aide  -i  
aide  --check  
logwatch  perl写的一个开源的日志分析工具，它主要是可以很方便的实现对日志的摘要，但它不是用来实时监控的。
[root@centos7 ~]# vim /etc/logwatch/conf/logwatch.conf  主配置文件

2017/05/11  网络配置
NetworkManager  图形化网络管理daemons
[root@centos6 ~]#  /etc/sysconfig/network-scripts/ifcfg-eth0   网卡的配置文件
centos6中对服务的开启自动启动控制通过命令chkconfig
[root@centos6 ~]# chkconfig --list  NetworkManager 
查看这个daemons在什么级别下会自动启动
[root@centos6 ~]# chkconfig NetworkManager off
在当前级别下关闭此服务
注：bash-completion 这个可以实现tab补全，系统最小化安装需要自己安装这个包
centos7中设置服务开机不自动启动
[root@centos7 ~]# systemctl disable  NetworkManager
通过mask可以将服务锁住
[root@centos7 ~]# systemctl mask  NetworkManager
centos中命令行网络配置：
[root@centos6 ~]# ifconfig lo 1.1.1.1 netmask 255.255.0.0 up
[root@centos6 ~]# ip addr  查看网卡信息
[root@centos6 ~]# ip link show lo
查看网卡的二层信息
[root@centos6 ~]# ip addr show lo
查看网卡三层信息
注：在centos7中，如果是最小化安装，默认是没有ifconfig指令的，只有ip addr。需要安装net-tools工具包
[root@centos6 ~]# ifdown lo
关闭网卡，开启使用ifup 
[root@centos6 ~]# ip link set lo down
二层关闭网卡
[root@centos6 ~]# ip addr add 192.168.1.1/24 dev lo label lo:1
配置一块网卡多个ip
[root@centos6 ~]# ifconfig lo:2 192.168.3.3  netmask 255.255.255.0 up

注：命令行下的所有操作都是临时有效，如果希望永久生效，需要修改配置文件
[root@centos6 ~]# route add default gw 192.168.24.254
添加网关

[root@centos6 ~]# tcpdump -i eth0
网卡抓包
[root@centos6 ~]# tcpdump -i eth0 src host 192.168.24.4 and dst host 192.168.24.240 
下载工具：wget、lrzsz
dns查询：nslookup
字符化浏览器：elinks

rhel7命令行网络配置
[root@centos7 ~]# nmcli connection show --active
查看当前活跃的网卡所有名称信息
[root@centos7 ~]# nmcli connection show eno16777736 
查看网卡的所有信息


[root@centos6 ~]# vim /etc/sysconfig/network
修改主机名，配置文件中的修改事永久生效的
[root@centos7 ~]# vim /etc/resolv.conf 
设置dns信息
[root@centos7 ~]# vim /etc/hosts
本地解析

桥接：
[root@centos7 ~]# yum install bridge-utils bash-completion-extras -y
安装桥接和补全工具
[root@centos7 ~]# brctl show 
查看当前的网桥设备
[root@centos7 ~]#brctl addbr br0 添加一个名为br0的网桥设备
[root@centos7 ~]#brctl addif br0 eno16777736 将物理网卡连接到网桥设备
[root@centos7 network-scripts]# vim ifcfg-br0  修改网桥配置文件
  1 TYPE=Bridge
  4 NAME=br0
  5 DEVICE=br0
  6 ONBOOT=yes
 
[root@centos7 network-scripts]# vim ifcfg-eno16777736  修改物理网卡配置，添加桥接功能
  1 TYPE=Ethernet
  2 BOOTPROTO=dchp
  3 NAME=eno16777736
  4 ONBOOT=yes
  5 HWADDR=00:0C:29:6B:C0:3A
  6 BRIDGE=br0

  2017/05/16 链路聚合
链路备份  activebackup
负载均衡  loadbalance 
轮循      roundrobin  
[root@centos7 ~]# nmcli connection show  查看当前网卡的信息
[root@centos7 ~]# nmcli connection add type team con-name  team0 ifname team0 config '{"runner":{"name":"loadbalance"}}'
通过nmcli创建一块虚拟网卡，虚拟网卡的类型是链路聚合，名称是team0，然后通过json定义使用的模式是负载均衡
[root@centos7 ~]# nmcli connection modify team0 ipv4.address ‘ip 网关 ’
[root@centos7 network-scripts]# nmcli connection add type team-slave con-name team-port1 ifname eno16777736 master team0 
定义类型为链路聚合组中的从设备类型，将名为eno16777736的网卡添加到主设备team0中，并生成名为team-port1的配置文件
[root@centos7 ~]# teamdctl team0 state   查看链路聚合网卡的状态
  1 NAME=team-port1
  2 BOOTPROTO=none
  3 DEVICE=eno16777736
  4 ONBOOT=yes
  5 TEAM_MASTER=team0
  6 DEVICETYPE=TeamPort                    
网络环境设置
vim /etc/udev/rule.d/70-persistent-net.rules   这个文件定义了网络设备命令的规则以及相关的信息制定
[root@a ~]# route add default gw 10.0.0.1  添加默认网关

[root@b ~]# route add -net 30.0.0.0/24 dev eth1  添加路由，代表如果要去往目的30.0.0.0网段，数据包走eth1

[root@c6 ~]# iptables -F 临时关闭防火墙
[root@c7 ~]# firewall-cmd set-default-zones=trusted   放行所有

如果希望配置永久生效
开启ipv4转发
[root@centos6 ~]# vim /etc/sysctl.conf 
[root@centos6 ~]# sysctl -p  不重启生效
[root@centos6 network-scripts]# vim route-eth1  配置路由永久生效
30.0.0.0/24  via 20.0.0.2 dev eth1

开源路由方案：openwrt、routeros

2017/05/18
防火墙:
硬件防火墙--数据包过滤
软件防火墙--tcpwrapper\iptables\ebtables\firewalld

包过滤防火墙技术：在网络层对数据包进行筛选（过滤），通过ACL。
代理服务防火墙技术，典型的就是链路级的网关。反向代理技术就是如此，典型的应用就是Nginx。

linux内核级别直接实现防火墙功能。
iptables就是依赖的netfilter
rhel7中使用的firewalld依然依赖的是netfilter，但是管理工具使用firewall-cmd

iptables直接由内核驱动运行，编写规则也是从上往下，并且一旦匹配某一条目，就不再往下匹配，不同服务之间规则互不影响。
iptables 表（table）
表分为filter表和nat表
[root@centos6 ~]# iptables -t nat -L -n  查看nat表的规则。参数t是table的意思，参数L是列表的意思。参数n是禁止反向解析。
[root@centos6 ~]# iptables  -L -n
不指明查看的表，默认就是filter表。

iptables 链（chain）
filter表的三条链：
INPUT    进入的数据
FORWARD  转发的数据
OUTPUT   出去的数据
nat表的三条链：
PREROUTING  目的地址转换
POSTROUTING  源地址转换
OUTPUT   防火墙自身访问时是否转换

iptables中filter表的语法：
[root@centos6 ~]# iptables -t filter  \
> -A|D|I   \   添加|删除|插入
> INPUT|OUTPUT|FORWARD      \ 指定链
> -p tcp|udp|icmp    \ 指定协议
> -s 1.1.1.1/24   -d 2.2.2.2/24  \
源地址和目的地址
> --sport m:n --dport m:n   \
源端口和目的端口
> -j ACCEPT|REJECT|DROP|LOG  执行动作，允许|拒绝|丢弃|记录


rhel7--firewalld
rhel7中默认开启的是firewalld，另外还可以使用iptables，或者ebtables。
为了防火墙之间的冲突，将不使用的彻底禁用。
[rot@rhel7 ~]# systemctl stop ebtables.service  关闭ebtables
[rot@rhel7 ~]# systemctl disable ebtables.service   禁止开机启动
[root@rhel7 ~]# systemctl mask ebtables.service   禁用ebtables

firewalld 有两种状态，一种是runtime，一种是permanent。runtime是默认状态，在这个状态下做的设置，立即生效，但服务或服务器一旦重启，失效。
permanent状态是永久生效的，但在这个状态下做的配置必须在服务或者服务器重启后才会永久生效。

firewall的中添加了区域的概念：
drop区域提供最严格的策略，丢弃所有
block区域提供和drop一样的策略，但是会给出提示信息
trusted区域提供最宽松的策略，放行所有
public是默认的策略
针对不同的区域提供不同的默认策略，可以针对services（具体服务）、ports端口、nat、端口映射、icmp过滤以及富规则进行设置。
[root@rhel7 ~]# firewall-cmd --set-default-zone=public 
设置默认区域
[root@rhel7 ~]# firewall-cmd --get-default-zone 
查看当前默认区域

[root@rhel7 ~]# firewall-cmd  --add-rich-rule='rule family=ipv4 service name=vnc-server source address=1.1.1.1 reject'
添加富规则
[root@rhel7 ~]# firewall-cmd --add-forward-port port=80:proto=tcp:toaddr=20.0.0.2:toport=80
添加端口转发


通过gnupg加密保护文件
10101010101   
01010101010
abcdefghijklmopqrstuvwxyz
 abcdefghijklmopqrstuvwxyz
 
对称加密：DES、3DES、AES、RC5
原始数据：01000001
公    钥：10101010
XOR运算： 00010100
优点：快，加密效率高，解密性能好
缺点：密钥配送问题，如果安全传递公钥
典型应用：wep

非对称加密：RSA
rsa  公钥  私钥
密文=明文的E次方除以N，得到的余数就是密文
明文=密文的D次方除以N，得到的余数就是明文
以上公式中E和N的结合就是公钥，D和N的结合就是私钥。
n=q*p  
l=（-1，p-1）
ECC 比RSA的密钥长度更短，但是安全性更高。
应用场景：ssh  https  
优点：安全性高
缺点：性能差，开销很大，存在中间人攻击。

混合算法：对称+非对称
对称加密算法加密消息
用非对称算法传递对称加密算法中的会话密钥

数字签名
单向散列函数 md5  sha1 sha256 sha512
消息认证码MAC：
发送方和接收方预共享密钥
发送发加密预共享密钥（用消息认证码加密）
接收方收到后也进行同样操作，并对比两人的结果是否一致

数字签名过程：公钥和私钥
发送方用单向散列函数加密消息
发送方对私钥对得到的散列值加密，最终得到签名
接收方用发送方的公钥对签名进行解密
接收方将解密后的散列和发送方发送的消息进行比对

[root@centos6 ~]# cd ~/.gnupg/
这个目录下存放了公钥和私钥

2017/05/25
BOOTPROTO--DHCP 
使用UDP协议通信，端口是67和68
dhcp discovery  客户端向服务器端发起的，用于查询dhcp服务器的位置，服务器端的67号端口用来监听此类包
dchp offer 是服务器端通过68号端口向客户端发起的响应
dchp request 是客户端向服务器端发起的请求，要求确认使用具体的ip等信息的。使用广播方式，如果存在其他的dhcp服务器，在收到这个广播包后，知道客户端已经选择了dhcp，会撤回前面发出的offer的信息。
dhcpack 这个是服务器端对客户端的信息的请求的回复。
dhcpnak  服务端发送给客户端，通常是因为地址过期或者无效
dchpdecline  客户端发送给服务器端，通常是地址被占用
dchpinfrom  客户端向服务器端申请参数

[root@centos6 ~]# yum install dhcp -y  安装dhcp服务
[root@centos6 ~]# iptables -I INPUT 1 -p udp --dport 67 -j ACCEPT
[root@centos6 ~]# iptables -I INPUT 1 -p udp --dport 68 -j ACCEPT
[root@centos6 ~]# service iptables save
[root@centos6 ~]# cp /usr/share/doc/dhcp-4.1.1/dhcpd.conf.sample /etc/dhcp/dhcpd.conf   生成配置文件
作用域格式：
subnet ip netmask {       
 中间写这个作用域的信息  
   }

[root@centos6 ~]# cat /var/lib/dhclient/dhclient-eth0.leases  在客户端上可以查看dhcp的租约等数据信息



超级作用域格式：
shared-network 11-22 {
	subnetsubnet ip netmask {       
 中间写这个作用域的信息  
   } 
   subnet ip netmask {       
 中间写这个作用域的信息  
   }
   subnet ip netmask {       
 中间写这个作用域的信息  
   }

}















 













































































































































